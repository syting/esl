x = [1, 2, 3]
x = (1, 2, 3)
(1, 2, 3)
[1, 2, 3]
c(1, 2.5, 4.5)
c(TRUE, FALSE)
c(T< T)
c(T, T)
c(T, T, S)
x = c(1, 2, 3)
typeof(x)
x
x.is_vector()
x.vector()
is.integer(x)
is.vector(x)
is.double(x)
x
typeof(x)
sum(c(T, T, F))
list(1, "a", 2.5)
y = list(1, "a", 2.5)
y[1]
y[2]
typeof(y[2])
is.character(y[2])
is.character(y[1])
is.character(y[0])
lm
mtcars
is.list(mtcars)
typeof(mtcars)
lm(mpg ~ wt, data = mtcars)
c(1, FALSE)
c ("a", 1)
c(list(1), "a")
c(TRUE, 1L)
as
as?
as
as | less
as.vector
help
help(as.vector)
help(unlist)
unlist(list(c(1, 2), "a")
unlist(list(c(1, 2), "a"))
as.vector(list(c(1, 2), "a"))
1 == "1"
"one"
"one" < "2"
y <- 1:10
y
y = 1:10
y
attr(y, "my_attribute")
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
structure(1:10)
structure(1:10, "a" = "b")
y = structure(1:10, "a" = "b")
y["a"]
str(y)
names(y)
class(y)
factor(c("a", "b", "c"))
x = factor(c("a", "b", "c"))
class(c)
levels(x)
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(sec_factor)
table(sex_factor)
help(comment)
letters
factor(letters)
help(rev)
f1 <- factors(letters))
f1 <- factors(letters)
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
f1
levels(f1)
levels(f1) <- rev(levels(f1))
f1
f1
rev(f1)
f1
help(factor)
typeof(f1)
factor(letters)
rev(factor(letters))
f2 <- rev(factor(letters))
f2
f1
a <- matrix(1:6, ncol = 3, nrol = 2)
a <- matrix(1:6, ncol = 3, nrow = 2)
a
b <- array(1:12, c(2, 3, 2))
b
c <- 1:6
dim(c) <- c(3, 2)
c
c*a
a*c
a.c
t(a)
a
t(a)*a
str(1:3)
str(matrix(1:3, ncol=1)
)
list(1:3, "a", TRUE, 1.0)
dim(c(1, 2, 3))
is.matrix(matrix(1:3, ncol = 1))
is.array(matrix(1:3, ncol = 1))
read.table?
help(read.table)
read.table("../data/prostate.data", header = TRUE, strip.white = TRUE)
df = read.table("../data/prostate.data", header = TRUE, strip.white = TRUE)
df
df[1]
df[
df[:][1]
df[,1]
df[1,]
df = read.table("../data/prostate.data", header = TRUE, strip.white = TRUE)
df[1,]
df[,1]
png('prostate.png', width=500, height=500)
plot(df)
dev.off()
plot(df)
lmfit <- lm(lpsa ~ l + lweight + age + lbph + svi + lcp + gleason + pgg45)
lmfit <- lm(lpsa ~ l + lweight + age + lbph + svi + lcp + gleason + pgg45, data=df)
lmfit
png('residuals.png', width=500, height=500)
par(mfrow=c(2,2))
plot(df$l, lmfit$residuals, xlab="l", ylab="Residuals")
plot(df$l, lmfit$residuals, xlab="l", ylab="Residuals")
df$l
lmfit$residuals
dev.off()
lmfit$residuals
plot(df$l, lmfit$residuals, xlab="l", ylab="Residuals")
X = read.table("../data/prostate.data")
X
X[1,]
help(scale)
help(sample)
help(apply)
source('load_prostate_data.R')
source('load_prostate_data.R')
LoadProstateData(globalScale=TRUE, traingingScale=FALSE, responseScale=FALSE)
LoadProstateData(globalScale=TRUE, trainingScale=FALSE, responseScale=FALSE)
res = LoadProstateData(globalScale=TRUE, trainingScale=FALSE, responseScale=FALSE)
res[1,]
res[1]
res
typeof(res)
res
res[1]
XTraining = res[[1]]
XTesting = res[[2]]
XTraining[1,]
help(library)
help(library)
source("duplicate_table_3_1_N_2.R")
install.packages('xtable')
xtable
library(xtable)
install.packages('tcltk')
install.packages("xtable", lib="/Users/syt/R/Packages")
install.packages("xtable", lib="/Users/syt/R/Packages")
source("duplicate_table_3_1_N_2.R")
source("duplicate_table_3_1_N_2.R")
source("duplicate_figure_3_5.R")
res = LoadProstateData(globalScale=TRUE, trainingScale=FALSE, responseScale=FALSE)
res
typeof(res)
res
res[1]
res[[1]]
lm
lm(lpsa ~ 1, res)
res
lm(lpsa ~ 1, res[1])
lm(lpsa ~ ., res[1])
res[1]
columns(res[1])
res
head(res[1])
res[1][:5]
res[1][1:5]
res
typeof(res[1])
typeof(res[[1]])
typeof(res[1])
names?
help(names)
names(res)
names(res[1])
names(res[[1]])
lm(lpsa ~ ., res[[1]])
?step
fwd.model = step(lpsa~1, direction='forward', scope=lpsa~.)
min.model = lm(lpsa ~ 1, res[[1]])
max.model = lm(lpsa ~ ., res[[1]])
fwd.model = step(min.model, direction='forward', scope=max.model)
max.model
biggest <- formula(lm(lpsa~.,res[[1]]))
fwd.model = step(min.model, direction='forward', scope=biggest)
fwd.model 
?step
glm
p1 <- glm(lpsa ~ ., res[[1]])
p1 <- glm(lpsa ~ ., data=res[[1]])
p1
stepwise(p1, direction='forward')
?stepwise
library(MASS)
?stepwise
stepwise(p1, direction='forward')
library(stepwise)
?step
?stepAIC
fwd.model = stepAIC(min.model, direction='forward', scope=biggest)
fwd.model = stepAIC(min.model, direction='forward', scope=biggest, scale=0)
fwd.model = stepAIC(min.model, direction='forward', scope=biggest, scale=1)
